services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: portfolio-db
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: portfolio_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d portfolio"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:portfolio_password_2024@db:5432/portfolio
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-2024
      JWT_EXPIRES_IN: 7d
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ${SMTP_USER:-your-email@gmail.com}
      SMTP_PASS: ${SMTP_PASS:-your-app-password}
      EMAIL_FROM: ${EMAIL_FROM:-your-email@gmail.com}
      EMAIL_TO: ${EMAIL_TO:-johan.stjernquist@example.com}
      FRONTEND_URL: http://localhost:3000
      PRODUCTION_URL: https://johancv.com
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - portfolio-network
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./cv-app
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3001
    container_name: portfolio-frontend
    environment:
      NODE_ENV: production
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - portfolio-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  portfolio-network:
    driver: bridge 